npm install -g @nestjs/cli - instalar cliente nestjs
nest g --help  - comando que permite mostrar la ayuda.
nest g module name - comando que te permite crear un modulo
nest g controller name -comando que te permite crear un controlador

create database task-management postgres

GET /_cluster/health

GET /_cat/nodes?v

GET /_cat/indices?v

GET /_cat/indices?v&expand_wildcards

GET /_analyze

GET /zonebystore/_search

PUT /pruebaindex
{
  "settings":{
    "number_of_shards": 1
    , "number_of_replicas": 1
  }
}

PUT /storeindex
{
  "settings":{
    "number_of_shards": 1
    , "number_of_replicas": 1
  }
}

GET /storeindex/_search

POST /storeindex/_doc
{
  "name": "Prueba index",
  "store": "Prueba store",
  "country":"EC",
  "price": 15,
  "status": true
}

PUT /storeindex/_doc/100
{
  "name": "Prueba index PERU",
  "store": "Prueba store PERU",
  "country":"PE",
  "price": 15,
  "status": "true"
  
}

POST /storeindex/_update/q_HzTYABxc1jR2F1bdCN
{
  "doc": {
    
    "status": "false"
  }
  
}


PUT /pruebaindex/_doc/100
{
  "name": "Prueba index PERU",
  "store": "Prueba store PERU",
  "country":"PE",
  "price": 15,
  "status": "true"
  
}

GET /pruebaindex/_doc/100

POST /pruebaindex/_update/100
{
  "doc": {
    "status": "false"
  }
  
}

POST /pruebaindex/_update/100
{
  "script": {
    "source": "ctx._source.status = 'true'"
  }
  
}


POST /pruebaindex/_update/100
{
  "script": {
    "source": "ctx._source.status = params.param",
    "params":{
      "param": "false"
    }
  }
  
}

GET /pruebaindex/_search

GET /pruebaindex/_search
{
  "query":{
    "match":{
      "status":{
        "query": "false",
        "operador": "and"
      }
    }
  }
}

GET /pruebaindex/_search
{
  "query":{
    "match_phrase":{
      "status": "false"
    }
  }
}

GET /pruebaindex/_search
{
  "query":{
    "multi_match":{
      "query": "false",
      "fields": ["status"]
    }
  }
}



POST /pruebaindex/_update_by_query
{
  "script":{
    "source": "ctx._source.status = 'false'"
  },
  "query":{
    "match_all": {}
  }
}

POST /pruebaindex/_delete_by_query
{
  "query":{
    "match_all": {}
  }
}

GET /pruebaindex/_mapping

DELETE /pruebaindex

query MyQuery {
  listStores{
    items{
      id,
      name
      channels{
        items{
          id,
          channelId,
          channel{
            id,
            vendorId,
            accountId
          },
          schedules{
            items{
              id,
              storeChannel{
                id,
                channelId,
                catalogueId,
                accountId
              }
      				storeChannelId,
              dayOfWeek
              timePeriods{
                items{
                  id,
                  scheduleId,
                  startTime,
                  endTime
                }
              }
            }
          }
        }
      }
    }
  }
}

query MyQuery {
  listZoneByStores{
    items{
      storeId
      zoneId,
      zone{
        id,
        name,
        stores{
          items{
            storeId,
            additionalInfo
          }
        }
      }
    }
  }
}

Para inicializar un proyecto o usar uno ya existente
• amplify init

Para configurar credenciales de aws (awskey aws_secret)
• amplify configure

Para compilar y chequear si el schema de graphQL esta bien 
• amplify api gql-compile

Para chequear que se va a subir o hacer deploy
• amplify status

Para actualizar los cambios que hizo otro sev y actualizar en mi maquina
• amplify pull

Para agregar una nueva funcion
• amplify add function

Para correr una funcion localmente 
• amplify mock function [function_name] --event src/event.json

Para hacer deploy 
• amplify push --y

{
  "shippingCosts": {
    "shippingCostId": "string",
    "accountId": "string",
    "additionalInfo": {
      "key": "value"
    },
    "zone": {
      "id": "string",
      "name": "string",
      "status": "string",
      "polygon": {
        "type": "polygon",
        "coordinates": [[[0.0, 0.0]]]
      }
    },
    "store": {
      "id": "string",
      "name": "string",
      "status": "string"
    },
    "catalogue": {
      "id": "string AKA channelID",
      "name": "string",
      "status": "string"
    },
    "shippingCost": 0.00,
    "taxes": [
      {
        "taxId": "string",
        "name": "string",
        "value": 0.00,
        "active": true
      }
    ]
  }
}
